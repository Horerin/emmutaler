# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Emmutaler

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ROMMeta(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsROMMeta(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ROMMeta()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def ROMMetaBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x52\x4F\x4D", size_prefixed=size_prefixed)

    # ROMMeta
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ROMMeta
    def BuildInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Emmutaler.BuildInfo import BuildInfo
            obj = BuildInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ROMMeta
    def LinkerInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Emmutaler.LinkerMeta import LinkerMeta
            obj = LinkerMeta()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ROMMeta
    def Symbols(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Emmutaler.Symbol import Symbol
            obj = Symbol()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ROMMeta
    def SymbolsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ROMMeta
    def SymbolsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def ROMMetaStart(builder): builder.StartObject(3)
def ROMMetaAddBuildInfo(builder, buildInfo): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buildInfo), 0)
def ROMMetaAddLinkerInfo(builder, linkerInfo): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(linkerInfo), 0)
def ROMMetaAddSymbols(builder, symbols): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(symbols), 0)
def ROMMetaStartSymbolsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ROMMetaEnd(builder): return builder.EndObject()
