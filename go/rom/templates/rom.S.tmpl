/*
{{template "gen_header" .}}
*/


/*
    The text section, extracted from the secure rom image.
*/
.section .rom.text, "ax"
/*
    Since the bootrom doesn't know that we execute before it,
    it will not save the link & frame regs on entry.
    Hence we do this here, so that we can get full backtrace information.
*/
.global fake_rom_start
.type fake_rom_start,@function
fake_rom_start:
stp x29, x30, [sp, #-0x10]!
mov x29, sp
mov x0, 0x10
movk x0, 0x1, lsl 32
stp x29, x0, [sp, #-0x10]!
mov x29, sp
/*
    From here on out, we have the actual boot rom image.
*/
{{range .R.TextSection.Chunks}}
{{if .Symb}}
.global {{.Symb.Name}}
.type {{.Symb.Name}},@function
{{.Symb.Name}}:
{{end}}
{{if .RawASM}}{{.RawASM}}{{else -}}
.incbin "{{$.R.BinaryPath}}", {{.FileStart}}, {{.Size}}
{{end}}
{{end}}
{{range .R.ExtraTextChunks}}
{{if .RawASM}}{{.RawASM}}{{end -}}
{{end}}

/*
    The data section, extracted from the secure rom image.
*/
.section .rom.data, "aw"
{{range .R.DataSection.Chunks}}
{{if .Symb}}
.global {{.Symb.Name}}
{{.Symb.Name}}:
{{end}}
.incbin "{{$.R.BinaryPath}}", {{.FileStart}}, {{.Size}}
{{end}}


/*
.section .rom.bss, "aw"
.fill {{.R.BSSSize}}

.section .rom.stack, "aw"
.fill {{.R.StacksSize}}
*/

.section .rom.pt, "aw"
.fill {{.R.PTSize}}

/*
    TODO: Figure out where we can get info about the heap of a rom image.
    Disassemble and find heap_init?
*/
{{/* .section .rom.heap, "aw"
.fill 0x8000 */}}

.section .rom.io, "aw"
.fill 0x30
.global report_id
report_id: .dc.l 0x0
.global report_arg0
report_arg0: .dc.l 0x0
.global report_arg1
report_arg1: .dc.l 0x0
.global report_arg2
report_arg2: .dc.l 0x0

.section .rom.gpio, "aw"
.fill 0xc4c
.dc.l 0x1
.fill 0x8000

.section .rom.pmgr, "aw"
.fill 0x8000