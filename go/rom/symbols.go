/*
   AUTOGENERATED DO NOT EDIT!
*/

package rom

import "github.com/galli-leo/emmutaler/fbs"

type Symbols struct {

	// __int64 __fastcall rom_start();
	rom_start *fbs.SymbolT

	//
	rom_aSecureromForT8 *fbs.SymbolT

	//
	rom_aRomrelease *fbs.SymbolT

	//
	rom_aIboot447900100 *fbs.SymbolT

	//
	rom__arm_write_sctlr *fbs.SymbolT

	//
	rom_nullsub_1 *fbs.SymbolT

	//
	rom_nullsub_2 *fbs.SymbolT

	//
	rom_nullsub_3 *fbs.SymbolT

	//
	rom_nullsub_4 *fbs.SymbolT

	//
	rom__arm_vtop *fbs.SymbolT

	//
	rom_arch_enable_ints *fbs.SymbolT

	//
	rom_nullsub_14 *fbs.SymbolT

	//
	rom__arch_halt *fbs.SymbolT

	//
	rom__arch_spin *fbs.SymbolT

	//
	rom_set_paci_a_key *fbs.SymbolT

	//
	rom_set_paci_b_key *fbs.SymbolT

	//
	rom_set_pacd_a_key *fbs.SymbolT

	//
	rom_set_pacd_b_key *fbs.SymbolT

	//
	rom_getcontext_call_X2 *fbs.SymbolT

	//
	rom_def_100001428 *fbs.SymbolT

	//
	rom_jpt_100001428 *fbs.SymbolT

	// void *__fastcall rom_arch_task_create(task *a1);
	rom_arch_task_create *fbs.SymbolT

	//
	rom_def_100003578 *fbs.SymbolT

	//
	rom_jpt_100003578 *fbs.SymbolT

	//
	rom__image4_get_partial *fbs.SymbolT

	//
	rom_der_expect *fbs.SymbolT

	//
	rom_der_restrict *fbs.SymbolT

	// int __fastcall rom_image4_validate_property_callback_interposer(asn1_tag tag, void *value, uint32_t propertyType, image4_wrapper_context *context);
	rom_image4_validate_property_callback_interposer *fbs.SymbolT

	// __int64 __fastcall rom_called_by_verify_impl(img4 *a1, image4_wrapper_context *a2);
	rom_called_by_verify_impl *fbs.SymbolT

	// __int64 __fastcall rom_image4_load(image_info *image_info, uint32_t *types, unsigned int count, unsigned int *actual, void **load_addr, unsigned __int64 load_len, unsigned __int64 *a7);
	rom_image4_load *fbs.SymbolT

	//
	rom_image4_verify_number_relation *fbs.SymbolT

	//
	rom_image4_verify_boolean_relation *fbs.SymbolT

	// void __fastcall rom_platform_start();
	rom_platform_start *fbs.SymbolT

	//
	rom_nullsub_5 *fbs.SymbolT

	// int __fastcall rom_memzero_if_io_reg(char *a1, __int64 a2);
	rom_memzero_if_io_reg *fbs.SymbolT

	//
	rom_panic_now *fbs.SymbolT

	//
	rom__chipid_get_chip_revision *fbs.SymbolT

	//
	rom_def_100008A1C *fbs.SymbolT

	//
	rom_jpt_100008A1C *fbs.SymbolT

	//
	rom_nullsub_6 *fbs.SymbolT

	//
	rom_def_100008B28 *fbs.SymbolT

	//
	rom_jpt_100008B28 *fbs.SymbolT

	//
	rom_nullsub_7 *fbs.SymbolT

	//
	rom_nullsub_8 *fbs.SymbolT

	//
	rom__panic *fbs.SymbolT

	//
	rom_stack_corrupted *fbs.SymbolT

	//
	rom_task_init *fbs.SymbolT

	//
	rom_security_get_effective_production_status *fbs.SymbolT

	// struct task *__fastcall static rom_task_create_etc(struct task *t, const char *name, task_routine routine, void *arg, void *stack, size_t stack_len);
	rom_task_create_etc *fbs.SymbolT

	//
	rom_idle_task_routine_0 *fbs.SymbolT

	//
	rom_current_task *fbs.SymbolT

	//
	rom__aes_crypto_cmd *fbs.SymbolT

	//
	rom__boot_check_panic *fbs.SymbolT

	//
	rom__ip6_drain *fbs.SymbolT

	//
	rom_nullsub_9 *fbs.SymbolT

	//
	rom_nullsub_10 *fbs.SymbolT

	//
	rom_nullsub_11 *fbs.SymbolT

	//
	rom_nullsub_12 *fbs.SymbolT

	//
	rom_image_search_bdev *fbs.SymbolT

	//
	rom_image_create_from_memory *fbs.SymbolT

	//
	rom_image_free *fbs.SymbolT

	// __int64 __fastcall rom___ZN25AppleExternalPowerManager23isExternalPowerProviderEP9IOService(AppleExternalPowerManager *__hidden this, IOService *);
	rom___ZN25AppleExternalPowerManager23isExternalPowerProviderEP9IOService *fbs.SymbolT

	//
	rom_nullsub_15 *fbs.SymbolT

	//
	rom_def_10000E514 *fbs.SymbolT

	//
	rom_jpt_10000E514 *fbs.SymbolT

	//
	rom_jpt_10000E6C4 *fbs.SymbolT

	//
	rom_jpt_10000E83C *fbs.SymbolT

	//
	rom__vsock_abort *fbs.SymbolT

	//
	rom_def_10000FBA8 *fbs.SymbolT

	//
	rom_jpt_10000FBA8 *fbs.SymbolT

	// int __fastcall rom_heap_alloc(__int64 a1);
	rom_heap_alloc *fbs.SymbolT

	// int __fastcall rom_free_list_remove(__int64 a1);
	rom_free_list_remove *fbs.SymbolT

	// void *__fastcall rom_malloc(__int64 a1);
	rom_malloc *fbs.SymbolT

	// __int64 __fastcall rom_free(void *a1);
	rom_free *fbs.SymbolT

	//
	rom_memset_s *fbs.SymbolT

	//
	rom__do_printf *fbs.SymbolT

	//
	rom_def_100010D1C *fbs.SymbolT

	//
	rom_def_100010D64 *fbs.SymbolT

	//
	rom_jpt_100010D1C *fbs.SymbolT

	//
	rom_jpt_100010D64 *fbs.SymbolT

	//
	rom__platform_early_init *fbs.SymbolT

	//
	rom__putchar *fbs.SymbolT

	//
	rom_strlcpy *fbs.SymbolT

	// void *__cdecl rom__memmove(void *__dst, const void *__src, size_t __n);
	rom__memmove *fbs.SymbolT

	// void __cdecl rom__bzero(void *, size_t);
	rom__bzero *fbs.SymbolT

	// void *__cdecl rom__memset(void *__b, int __c, size_t __len);
	rom__memset *fbs.SymbolT

	//
	rom_memcmp *fbs.SymbolT

	//
	rom_def_1000120D0 *fbs.SymbolT

	//
	rom_jpt_1000120D0 *fbs.SymbolT

	//
	rom_timer_get_ticks *fbs.SymbolT

	// void __fastcall rom_enter_critical_section();
	rom_enter_critical_section *fbs.SymbolT

	//
	rom_exit_critical_section *fbs.SymbolT

	// void __fastcall rom_image4_load_decrypt_payload();
	rom_image4_load_decrypt_payload *fbs.SymbolT

	//
	rom_platform_get_secure_mode *fbs.SymbolT

	//
	rom_j__chipid_get_chip_revision *fbs.SymbolT

	//
	rom_j__ip6_drain *fbs.SymbolT

	//
	rom_j__arch_halt *fbs.SymbolT

	//
	rom_j_j__arch_halt *fbs.SymbolT

	// __int64 __fastcall rom_DERImg4DecodeFindInSequence_0(void *set_data, __int64 *set_end, __int64 search_key, DERItem *dest);
	rom_DERImg4DecodeFindInSequence_0 *fbs.SymbolT

	// __int64 __fastcall rom_DERImg4DecodeContentFindItemWithTag_0(DERItem *set, __int64 search_key, DERItem *dest);
	rom_DERImg4DecodeContentFindItemWithTag_0 *fbs.SymbolT

	// __int64 __fastcall rom_DERImg4DecodeTagCompare_1(_QWORD, _QWORD);
	rom_DERImg4DecodeTagCompare_1 *fbs.SymbolT

	// __int64 __fastcall rom_parse_main_img4_der(DERItem *a1, __int64 decoded_infos);
	rom_parse_main_img4_der *fbs.SymbolT

	// __int64 __fastcall rom_parse_payload_der(DERItem *a1, img4_payload *payload_items);
	rom_parse_payload_der *fbs.SymbolT

	// __int64 __fastcall rom_parse_manifest_der(_QWORD *a1, img4_manifest *manifest_items);
	rom_parse_manifest_der *fbs.SymbolT

	// DERItem *__fastcall rom_parse_recovery_der(DERItem *result, img4_recovery *recovery);
	rom_parse_recovery_der *fbs.SymbolT

	// __int64 __fastcall rom_DERImg4DecodeProperty_0(DERItem *a1, asn1_tag a2, DERDecodedInfoFind *find_result);
	rom_DERImg4DecodeProperty_0 *fbs.SymbolT

	// __int64 __fastcall rom_DERFindInSequence(DERItem *set, asn1_tag search_key, asn1_tag return_type_maybe, DERDecodedInfoFind *result);
	rom_DERFindInSequence *fbs.SymbolT

	// __int64 __fastcall rom_DERImg4DecodeParseManifestProperties_0(img4 *a1, DERItem *manb, DERItem *manp);
	rom_DERImg4DecodeParseManifestProperties_0 *fbs.SymbolT

	// __int64 __fastcall rom__Img4DecodePayloadExists_0(img4 *a1, bool *a2);
	rom__Img4DecodePayloadExists_0 *fbs.SymbolT

	// __int64 __fastcall rom_Img4DecodeGetPayload(img4 *img4, DERItem *res);
	rom_Img4DecodeGetPayload *fbs.SymbolT

	// __int64 __fastcall rom_Img4DecodeGetPayloadType(img4 *a1, _DWORD *a2);
	rom_Img4DecodeGetPayloadType *fbs.SymbolT

	// __int64 __fastcall rom_Img4DecodeGetPayloadKeybag(img4 *a1, __int64 a2);
	rom_Img4DecodeGetPayloadKeybag *fbs.SymbolT

	// __int64 __fastcall rom_Img4DecodeCopyPayloadDigest(img4 *a1, __int64 x1_0, unsigned __int64 a3, Img4DecodeImplementation *a4);
	rom_Img4DecodeCopyPayloadDigest *fbs.SymbolT

	// __int64 __fastcall rom__Img4DecodeManifestExists_0(img4 *, bool *validManifest);
	rom__Img4DecodeManifestExists_0 *fbs.SymbolT

	// __int64 __fastcall rom_Img4DecodeCopyManifestDigest(img4 *a1, __int64 dest, unsigned __int64 a3, Img4DecodeImplementation *a4);
	rom_Img4DecodeCopyManifestDigest *fbs.SymbolT

	//
	rom__Img4DecodeSectionExists_0 *fbs.SymbolT

	//
	rom__Img4DecodeGetRestoreInfoData *fbs.SymbolT

	//
	rom_Img4DecodeGetPropertyBoolean_0 *fbs.SymbolT

	// __int64 __fastcall rom_hasher_18(img4 *img4);
	rom_hasher_18 *fbs.SymbolT

	// __int64 __fastcall rom_Img4DecodeEvaluateDictionaryProperties_0(const DERItem *a1, __int64 propType, int (__fastcall *image4_validate_property_callback_interposer)(uint32_t, void *, uint32_t, void *), void *context);
	rom_Img4DecodeEvaluateDictionaryProperties_0 *fbs.SymbolT

	// __int64 __fastcall rom_Img4DecodeInit(DERByte *bjectBuffer, DERSize correctedObjectSize, img4 *img4);
	rom_Img4DecodeInit *fbs.SymbolT

	// __int64 __fastcall rom_Img4DecodePerformTrustEvaluatation(uint32_t actualType, img4 *img4, void *validate_props, Img4DecodeImplementation *hasher, image4_wrapper_context *wrapper_ctxt);
	rom_Img4DecodePerformTrustEvaluatation *fbs.SymbolT

	// __int64 __fastcall rom_verify_signature_for_reals(DERItem *chain, const unsigned __int8 *hash_oid, DERItem *manifest_hash, DERItem *sig_blob, __int64 key_size, __int64 hash_size, Img4DecodeImplementation *hasher);
	rom_verify_signature_for_reals *fbs.SymbolT

	// __int64 __fastcall rom__verify_signature_rsa_0(__int64 a1, __int64 a2, __int64 signature_data, __int64 signature_len, __int64 manifest_item_digest, __int64 hasher_size, Img4DecodeImplementation *hasher);
	rom__verify_signature_rsa_0 *fbs.SymbolT

	// __int64 __fastcall rom_process_chain(DERItem *chain, __int64 max_len, _QWORD *a3, __int64 a4, __int64 a5, __int64 a6);
	rom_process_chain *fbs.SymbolT

	// __int64 __fastcall rom_verify_parse_chain(__int64 a1, __int64 a2, __int64 a3, __int64 a4, DERByte **a5, DERSize *a6, Img4DecodeImplementation *hasher, __int64 (__fastcall *crack_chain_root)(DERItem *, DERItem[], unsigned int));
	rom_verify_parse_chain *fbs.SymbolT

	// __int64 __fastcall rom_hasher_8(__int64 cert_chain_data, __int64 cert_chain_len, __int64 local1, __int64 local2);
	rom_hasher_8 *fbs.SymbolT

	// __int64 __fastcall rom_crack_chain_root(DERItem *certBlob, DERItem *__attribute__((__org_arrdim(0,0))) chain, unsigned int chain_len);
	rom_crack_chain_root *fbs.SymbolT

	// __int64 __fastcall rom_Img4DecodeComputeDigest(void *a1, __int64 len, void *probs_dest, __int64 hash_size, Img4DecodeImplementation *a5);
	rom_Img4DecodeComputeDigest *fbs.SymbolT

	// __int64 __fastcall rom_crack_chain(DERItem *certBlob, DERItem *__attribute__((__org_arrdim(0,0))) chain, unsigned int chain_len);
	rom_crack_chain *fbs.SymbolT

	// DERReturn __fastcall rom_DERDecodeItem(const DERItem *der, DERDecodedInfo *decoded);
	rom_DERDecodeItem *fbs.SymbolT

	// DERReturn __fastcall rom_DERDecodeItemPartialBuffer(const DERItem *der, DERDecodedInfo *decoded, bool allowPartialBuffer);
	rom_DERDecodeItemPartialBuffer *fbs.SymbolT

	//
	rom__DERParseBitString_0_0 *fbs.SymbolT

	//
	rom__DERParseBoolean_0 *fbs.SymbolT

	// DERReturn __fastcall rom_DERParseInteger(const DERItem *contents, uint32_t *result);
	rom_DERParseInteger *fbs.SymbolT

	// DERReturn __fastcall rom__DERParseInteger64(const DERItem *contents, uint64_t *result);
	rom__DERParseInteger64 *fbs.SymbolT

	// __int64 __fastcall rom_DERDecodeSeqInitAgain(const DERItem *a1, asn1_tag *a2, DERSequence *a3);
	rom_DERDecodeSeqInitAgain *fbs.SymbolT

	// DERReturn __fastcall rom_DERDecodeSeqContentInit(const DERItem *content, DERSequence *derSeq);
	rom_DERDecodeSeqContentInit *fbs.SymbolT

	// DERReturn __fastcall rom_DERDecodeSeqNext(DERSequence *derSeq, DERDecodedInfo *decoded);
	rom_DERDecodeSeqNext *fbs.SymbolT

	// DERReturn __fastcall rom_DERParseSequence(const DERItem *der, DERShort numItems, const DERItemSpec *itemSpecs, void *dest, DERSize sizeToZero);
	rom_DERParseSequence *fbs.SymbolT

	// DERReturn __fastcall rom_DERParseSequenceContent(const DERItem *content, DERShort numItems, const DERItemSpec *itemSpecs, void *dest, DERSize sizeToZero);
	rom_DERParseSequenceContent *fbs.SymbolT

	// bool __fastcall rom_DEROidCompare(const DERItem *oid1, const DERItem *oid2);
	rom_DEROidCompare *fbs.SymbolT

	//
	rom__lzvn_decode_buffer *fbs.SymbolT

	//
	rom__lz4_decode_asm *fbs.SymbolT

	//
	rom__lzfse_decode_lmd *fbs.SymbolT

	//
	rom__lzfse_decode_literals *fbs.SymbolT

	//
	rom__lz4raw_decode_buffer *fbs.SymbolT

	//
	rom__LZFSEIBootBufferPush *fbs.SymbolT

	//
	rom_aes_key_expansion *fbs.SymbolT

	//
	rom__ccaes_arm_decrypt_key128 *fbs.SymbolT

	//
	rom__ccaes_arm_decrypt_key192 *fbs.SymbolT

	//
	rom__ccaes_arm_decrypt_key256 *fbs.SymbolT

	//
	rom__ccaes_arm_encrypt_key *fbs.SymbolT

	//
	rom__ccaes_arm_encrypt_key_0 *fbs.SymbolT

	// int __cdecl rom__ccn_cmp_0(cc_size n, const cc_unit *s, const cc_unit *t);
	rom__ccn_cmp_0 *fbs.SymbolT

	//
	rom_nullsub_13 *fbs.SymbolT

	// void __cdecl rom__ccn_mul(cc_size n, cc_unit *r_2n, const cc_unit *s, const cc_unit *t);
	rom__ccn_mul *fbs.SymbolT

	// void __fastcall rom_ccdigest(const struct ccdigest_info *di, size_t len, const void *data, void *digest);
	rom_ccdigest *fbs.SymbolT

	// void __fastcall rom__ccdigest_init(const struct ccdigest_info *di, ccdigest_ctx_t ctx);
	rom__ccdigest_init *fbs.SymbolT

	// void __fastcall rom__ccdigest_update(const struct ccdigest_info *di, #94 ctx, size_t len, const void *data);
	rom__ccdigest_update *fbs.SymbolT

	//
	rom__cchmac_final *fbs.SymbolT

	// __int64 __fastcall rom__cchmac_init(struct ccdigest_info *di, #94 ctx);
	rom__cchmac_init *fbs.SymbolT

	// void __fastcall rom_j__ccdigest_update(const struct ccdigest_info *di, #94 ctx, size_t len, const void *data);
	rom_j__ccdigest_update *fbs.SymbolT

	//
	rom__cc_mux2p *fbs.SymbolT

	// cc_unit __cdecl rom__ccn_add_0(cc_size n, cc_unit *r, const cc_unit *s, const cc_unit *t);
	rom__ccn_add_0 *fbs.SymbolT

	// cc_unit __cdecl rom__ccn_sub_0(cc_size n, cc_unit *r, const cc_unit *s, const cc_unit *t);
	rom__ccn_sub_0 *fbs.SymbolT

	// size_t __cdecl rom__ccn_write_uint_size(cc_size n, const cc_unit *s);
	rom__ccn_write_uint_size *fbs.SymbolT

	//
	rom_cc_clear *fbs.SymbolT

	//
	rom__ccn_shift_right_1 *fbs.SymbolT

	//
	rom__ccdrbg_factory_nisthmac *fbs.SymbolT

	// void *__cdecl rom__cc_muxp(int s, const void *a, const void *b);
	rom__cc_muxp *fbs.SymbolT

	// cc_size __cdecl rom__ccn_n_0(cc_size n, const cc_unit *s);
	rom__ccn_n_0 *fbs.SymbolT

	//
	rom_aNor0 *fbs.SymbolT

	//
	rom_aSpiNand0 *fbs.SymbolT

	//
	rom_aImg4 *fbs.SymbolT

	//
	rom_aIm4p *fbs.SymbolT

	//
	rom_aAppleMobileDev *fbs.SymbolT

	//
	rom_aCpid04xCprv02x *fbs.SymbolT

	//
	rom_aSrtgS *fbs.SymbolT

	//
	rom_aNonc *fbs.SymbolT

	//
	rom_a02x *fbs.SymbolT

	//
	rom_aSnon *fbs.SymbolT

	//
	rom_aDoublePanicIn *fbs.SymbolT

	//
	rom_aPanic *fbs.SymbolT

	//
	rom_aConstructingId *fbs.SymbolT

	//
	rom_aIdleTask *fbs.SymbolT

	//
	rom_aUsb *fbs.SymbolT

	//
	rom_aNull *fbs.SymbolT

	//
	rom_aPtr *fbs.SymbolT

	//
	rom_a0x *fbs.SymbolT

	//
	rom_aAppleInc *fbs.SymbolT

	//
	rom_a78 *fbs.SymbolT

	// DERItemSpec rom_img4_item_spec[4];
	rom_img4_item_spec *fbs.SymbolT

	// DERItemSpec rom_payload_item_spec[6];
	rom_payload_item_spec *fbs.SymbolT

	//
	rom_manifest_item_spec *fbs.SymbolT

	//
	rom_recover_item_spec *fbs.SymbolT

	//
	rom_payload_uk_item_spec *fbs.SymbolT

	//
	rom_root_ca *fbs.SymbolT

	//
	rom_oidRsa *fbs.SymbolT

	//
	rom_oidSha384Rsa *fbs.SymbolT

	// void *rom_oidEcPubKey;
	rom_oidEcPubKey *fbs.SymbolT

	//
	rom_oidSha384 *fbs.SymbolT

	//
	rom_oidAppleImg4ManifestCertSpec *fbs.SymbolT

	// hash_info rom_hasher_meta;
	rom_hasher_meta *fbs.SymbolT

	//
	rom_cc_digest_impl *fbs.SymbolT

	//
	rom_oidRsaItem *fbs.SymbolT

	//
	rom_oidEcPubKeyItem *fbs.SymbolT

	//
	rom_oidSha384Item *fbs.SymbolT

	//
	rom_oidAppleImg4ManifestCertSpecItem *fbs.SymbolT

	//
	rom_stack_cookie *fbs.SymbolT

	// struct list_node rom_task_list;
	rom_task_list *fbs.SymbolT

	//
	rom_bootstrap_task *fbs.SymbolT

	//
	rom_idle_task_routine *fbs.SymbolT

	// unsigned int (__fastcall *rom_crack_chain_root_ptr)(DERItem *certBlob, DERItem *chain, __int64 chain_len);
	rom_crack_chain_root_ptr *fbs.SymbolT

	// image4_callbacks rom_image4_callbacks_0;
	rom_image4_callbacks_0 *fbs.SymbolT

	//
	rom_idle_task *fbs.SymbolT

	//
	rom_task_count *fbs.SymbolT

	//
	rom_max_task_id *fbs.SymbolT

	// const struct ccdigest_info *rom_img_hash_impml;
	rom_img_hash_impml *fbs.SymbolT
}

// Gets the symbols from the rom meta information.
func (r *ROM) GetSymbols() *Symbols {
	ret := &Symbols{}

	ret.rom_start = r.Symbols()[0]

	ret.rom_aSecureromForT8 = r.Symbols()[1]

	ret.rom_aRomrelease = r.Symbols()[2]

	ret.rom_aIboot447900100 = r.Symbols()[3]

	ret.rom__arm_write_sctlr = r.Symbols()[4]

	ret.rom_nullsub_1 = r.Symbols()[5]

	ret.rom_nullsub_2 = r.Symbols()[6]

	ret.rom_nullsub_3 = r.Symbols()[7]

	ret.rom_nullsub_4 = r.Symbols()[8]

	ret.rom__arm_vtop = r.Symbols()[9]

	ret.rom_arch_enable_ints = r.Symbols()[10]

	ret.rom_nullsub_14 = r.Symbols()[11]

	ret.rom__arch_halt = r.Symbols()[12]

	ret.rom__arch_spin = r.Symbols()[13]

	ret.rom_set_paci_a_key = r.Symbols()[14]

	ret.rom_set_paci_b_key = r.Symbols()[15]

	ret.rom_set_pacd_a_key = r.Symbols()[16]

	ret.rom_set_pacd_b_key = r.Symbols()[17]

	ret.rom_getcontext_call_X2 = r.Symbols()[18]

	ret.rom_def_100001428 = r.Symbols()[19]

	ret.rom_jpt_100001428 = r.Symbols()[20]

	ret.rom_arch_task_create = r.Symbols()[21]

	ret.rom_def_100003578 = r.Symbols()[22]

	ret.rom_jpt_100003578 = r.Symbols()[23]

	ret.rom__image4_get_partial = r.Symbols()[24]

	ret.rom_der_expect = r.Symbols()[25]

	ret.rom_der_restrict = r.Symbols()[26]

	ret.rom_image4_validate_property_callback_interposer = r.Symbols()[27]

	ret.rom_called_by_verify_impl = r.Symbols()[28]

	ret.rom_image4_load = r.Symbols()[29]

	ret.rom_image4_verify_number_relation = r.Symbols()[30]

	ret.rom_image4_verify_boolean_relation = r.Symbols()[31]

	ret.rom_platform_start = r.Symbols()[32]

	ret.rom_nullsub_5 = r.Symbols()[33]

	ret.rom_memzero_if_io_reg = r.Symbols()[34]

	ret.rom_panic_now = r.Symbols()[35]

	ret.rom__chipid_get_chip_revision = r.Symbols()[36]

	ret.rom_def_100008A1C = r.Symbols()[37]

	ret.rom_jpt_100008A1C = r.Symbols()[38]

	ret.rom_nullsub_6 = r.Symbols()[39]

	ret.rom_def_100008B28 = r.Symbols()[40]

	ret.rom_jpt_100008B28 = r.Symbols()[41]

	ret.rom_nullsub_7 = r.Symbols()[42]

	ret.rom_nullsub_8 = r.Symbols()[43]

	ret.rom__panic = r.Symbols()[44]

	ret.rom_stack_corrupted = r.Symbols()[45]

	ret.rom_task_init = r.Symbols()[46]

	ret.rom_security_get_effective_production_status = r.Symbols()[47]

	ret.rom_task_create_etc = r.Symbols()[48]

	ret.rom_idle_task_routine_0 = r.Symbols()[49]

	ret.rom_current_task = r.Symbols()[50]

	ret.rom__aes_crypto_cmd = r.Symbols()[51]

	ret.rom__boot_check_panic = r.Symbols()[52]

	ret.rom__ip6_drain = r.Symbols()[53]

	ret.rom_nullsub_9 = r.Symbols()[54]

	ret.rom_nullsub_10 = r.Symbols()[55]

	ret.rom_nullsub_11 = r.Symbols()[56]

	ret.rom_nullsub_12 = r.Symbols()[57]

	ret.rom_image_search_bdev = r.Symbols()[58]

	ret.rom_image_create_from_memory = r.Symbols()[59]

	ret.rom_image_free = r.Symbols()[60]

	ret.rom___ZN25AppleExternalPowerManager23isExternalPowerProviderEP9IOService = r.Symbols()[61]

	ret.rom_nullsub_15 = r.Symbols()[62]

	ret.rom_def_10000E514 = r.Symbols()[63]

	ret.rom_jpt_10000E514 = r.Symbols()[64]

	ret.rom_jpt_10000E6C4 = r.Symbols()[65]

	ret.rom_jpt_10000E83C = r.Symbols()[66]

	ret.rom__vsock_abort = r.Symbols()[67]

	ret.rom_def_10000FBA8 = r.Symbols()[68]

	ret.rom_jpt_10000FBA8 = r.Symbols()[69]

	ret.rom_heap_alloc = r.Symbols()[70]

	ret.rom_free_list_remove = r.Symbols()[71]

	ret.rom_malloc = r.Symbols()[72]

	ret.rom_free = r.Symbols()[73]

	ret.rom_memset_s = r.Symbols()[74]

	ret.rom__do_printf = r.Symbols()[75]

	ret.rom_def_100010D1C = r.Symbols()[76]

	ret.rom_def_100010D64 = r.Symbols()[77]

	ret.rom_jpt_100010D1C = r.Symbols()[78]

	ret.rom_jpt_100010D64 = r.Symbols()[79]

	ret.rom__platform_early_init = r.Symbols()[80]

	ret.rom__putchar = r.Symbols()[81]

	ret.rom_strlcpy = r.Symbols()[82]

	ret.rom__memmove = r.Symbols()[83]

	ret.rom__bzero = r.Symbols()[84]

	ret.rom__memset = r.Symbols()[85]

	ret.rom_memcmp = r.Symbols()[86]

	ret.rom_def_1000120D0 = r.Symbols()[87]

	ret.rom_jpt_1000120D0 = r.Symbols()[88]

	ret.rom_timer_get_ticks = r.Symbols()[89]

	ret.rom_enter_critical_section = r.Symbols()[90]

	ret.rom_exit_critical_section = r.Symbols()[91]

	ret.rom_image4_load_decrypt_payload = r.Symbols()[92]

	ret.rom_platform_get_secure_mode = r.Symbols()[93]

	ret.rom_j__chipid_get_chip_revision = r.Symbols()[94]

	ret.rom_j__ip6_drain = r.Symbols()[95]

	ret.rom_j__arch_halt = r.Symbols()[96]

	ret.rom_j_j__arch_halt = r.Symbols()[97]

	ret.rom_DERImg4DecodeFindInSequence_0 = r.Symbols()[98]

	ret.rom_DERImg4DecodeContentFindItemWithTag_0 = r.Symbols()[99]

	ret.rom_DERImg4DecodeTagCompare_1 = r.Symbols()[100]

	ret.rom_parse_main_img4_der = r.Symbols()[101]

	ret.rom_parse_payload_der = r.Symbols()[102]

	ret.rom_parse_manifest_der = r.Symbols()[103]

	ret.rom_parse_recovery_der = r.Symbols()[104]

	ret.rom_DERImg4DecodeProperty_0 = r.Symbols()[105]

	ret.rom_DERFindInSequence = r.Symbols()[106]

	ret.rom_DERImg4DecodeParseManifestProperties_0 = r.Symbols()[107]

	ret.rom__Img4DecodePayloadExists_0 = r.Symbols()[108]

	ret.rom_Img4DecodeGetPayload = r.Symbols()[109]

	ret.rom_Img4DecodeGetPayloadType = r.Symbols()[110]

	ret.rom_Img4DecodeGetPayloadKeybag = r.Symbols()[111]

	ret.rom_Img4DecodeCopyPayloadDigest = r.Symbols()[112]

	ret.rom__Img4DecodeManifestExists_0 = r.Symbols()[113]

	ret.rom_Img4DecodeCopyManifestDigest = r.Symbols()[114]

	ret.rom__Img4DecodeSectionExists_0 = r.Symbols()[115]

	ret.rom__Img4DecodeGetRestoreInfoData = r.Symbols()[116]

	ret.rom_Img4DecodeGetPropertyBoolean_0 = r.Symbols()[117]

	ret.rom_hasher_18 = r.Symbols()[118]

	ret.rom_Img4DecodeEvaluateDictionaryProperties_0 = r.Symbols()[119]

	ret.rom_Img4DecodeInit = r.Symbols()[120]

	ret.rom_Img4DecodePerformTrustEvaluatation = r.Symbols()[121]

	ret.rom_verify_signature_for_reals = r.Symbols()[122]

	ret.rom__verify_signature_rsa_0 = r.Symbols()[123]

	ret.rom_process_chain = r.Symbols()[124]

	ret.rom_verify_parse_chain = r.Symbols()[125]

	ret.rom_hasher_8 = r.Symbols()[126]

	ret.rom_crack_chain_root = r.Symbols()[127]

	ret.rom_Img4DecodeComputeDigest = r.Symbols()[128]

	ret.rom_crack_chain = r.Symbols()[129]

	ret.rom_DERDecodeItem = r.Symbols()[130]

	ret.rom_DERDecodeItemPartialBuffer = r.Symbols()[131]

	ret.rom__DERParseBitString_0_0 = r.Symbols()[132]

	ret.rom__DERParseBoolean_0 = r.Symbols()[133]

	ret.rom_DERParseInteger = r.Symbols()[134]

	ret.rom__DERParseInteger64 = r.Symbols()[135]

	ret.rom_DERDecodeSeqInitAgain = r.Symbols()[136]

	ret.rom_DERDecodeSeqContentInit = r.Symbols()[137]

	ret.rom_DERDecodeSeqNext = r.Symbols()[138]

	ret.rom_DERParseSequence = r.Symbols()[139]

	ret.rom_DERParseSequenceContent = r.Symbols()[140]

	ret.rom_DEROidCompare = r.Symbols()[141]

	ret.rom__lzvn_decode_buffer = r.Symbols()[142]

	ret.rom__lz4_decode_asm = r.Symbols()[143]

	ret.rom__lzfse_decode_lmd = r.Symbols()[144]

	ret.rom__lzfse_decode_literals = r.Symbols()[145]

	ret.rom__lz4raw_decode_buffer = r.Symbols()[146]

	ret.rom__LZFSEIBootBufferPush = r.Symbols()[147]

	ret.rom_aes_key_expansion = r.Symbols()[148]

	ret.rom__ccaes_arm_decrypt_key128 = r.Symbols()[149]

	ret.rom__ccaes_arm_decrypt_key192 = r.Symbols()[150]

	ret.rom__ccaes_arm_decrypt_key256 = r.Symbols()[151]

	ret.rom__ccaes_arm_encrypt_key = r.Symbols()[152]

	ret.rom__ccaes_arm_encrypt_key_0 = r.Symbols()[153]

	ret.rom__ccn_cmp_0 = r.Symbols()[154]

	ret.rom_nullsub_13 = r.Symbols()[155]

	ret.rom__ccn_mul = r.Symbols()[156]

	ret.rom_ccdigest = r.Symbols()[157]

	ret.rom__ccdigest_init = r.Symbols()[158]

	ret.rom__ccdigest_update = r.Symbols()[159]

	ret.rom__cchmac_final = r.Symbols()[160]

	ret.rom__cchmac_init = r.Symbols()[161]

	ret.rom_j__ccdigest_update = r.Symbols()[162]

	ret.rom__cc_mux2p = r.Symbols()[163]

	ret.rom__ccn_add_0 = r.Symbols()[164]

	ret.rom__ccn_sub_0 = r.Symbols()[165]

	ret.rom__ccn_write_uint_size = r.Symbols()[166]

	ret.rom_cc_clear = r.Symbols()[167]

	ret.rom__ccn_shift_right_1 = r.Symbols()[168]

	ret.rom__ccdrbg_factory_nisthmac = r.Symbols()[169]

	ret.rom__cc_muxp = r.Symbols()[170]

	ret.rom__ccn_n_0 = r.Symbols()[171]

	ret.rom_aNor0 = r.Symbols()[172]

	ret.rom_aSpiNand0 = r.Symbols()[173]

	ret.rom_aImg4 = r.Symbols()[174]

	ret.rom_aIm4p = r.Symbols()[175]

	ret.rom_aAppleMobileDev = r.Symbols()[176]

	ret.rom_aCpid04xCprv02x = r.Symbols()[177]

	ret.rom_aSrtgS = r.Symbols()[178]

	ret.rom_aNonc = r.Symbols()[179]

	ret.rom_a02x = r.Symbols()[180]

	ret.rom_aSnon = r.Symbols()[181]

	ret.rom_aDoublePanicIn = r.Symbols()[182]

	ret.rom_aPanic = r.Symbols()[183]

	ret.rom_aConstructingId = r.Symbols()[184]

	ret.rom_aIdleTask = r.Symbols()[185]

	ret.rom_aUsb = r.Symbols()[186]

	ret.rom_aNull = r.Symbols()[187]

	ret.rom_aPtr = r.Symbols()[188]

	ret.rom_a0x = r.Symbols()[189]

	ret.rom_aAppleInc = r.Symbols()[190]

	ret.rom_a78 = r.Symbols()[191]

	ret.rom_img4_item_spec = r.Symbols()[192]

	ret.rom_payload_item_spec = r.Symbols()[193]

	ret.rom_manifest_item_spec = r.Symbols()[194]

	ret.rom_recover_item_spec = r.Symbols()[195]

	ret.rom_payload_uk_item_spec = r.Symbols()[196]

	ret.rom_root_ca = r.Symbols()[197]

	ret.rom_oidRsa = r.Symbols()[198]

	ret.rom_oidSha384Rsa = r.Symbols()[199]

	ret.rom_oidEcPubKey = r.Symbols()[200]

	ret.rom_oidSha384 = r.Symbols()[201]

	ret.rom_oidAppleImg4ManifestCertSpec = r.Symbols()[202]

	ret.rom_hasher_meta = r.Symbols()[203]

	ret.rom_cc_digest_impl = r.Symbols()[204]

	ret.rom_oidRsaItem = r.Symbols()[205]

	ret.rom_oidEcPubKeyItem = r.Symbols()[206]

	ret.rom_oidSha384Item = r.Symbols()[207]

	ret.rom_oidAppleImg4ManifestCertSpecItem = r.Symbols()[208]

	ret.rom_stack_cookie = r.Symbols()[209]

	ret.rom_task_list = r.Symbols()[210]

	ret.rom_bootstrap_task = r.Symbols()[211]

	ret.rom_idle_task_routine = r.Symbols()[212]

	ret.rom_crack_chain_root_ptr = r.Symbols()[213]

	ret.rom_image4_callbacks_0 = r.Symbols()[214]

	ret.rom_idle_task = r.Symbols()[215]

	ret.rom_task_count = r.Symbols()[216]

	ret.rom_max_task_id = r.Symbols()[217]

	ret.rom_img_hash_impml = r.Symbols()[218]

	return ret
}
