// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Emmutaler

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LinkerMeta struct {
	_tab flatbuffers.Table
}

func GetRootAsLinkerMeta(buf []byte, offset flatbuffers.UOffsetT) *LinkerMeta {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LinkerMeta{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LinkerMeta) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LinkerMeta) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LinkerMeta) Text(obj *LinkedSection) *LinkedSection {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(LinkedSection)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LinkerMeta) TextSize() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LinkerMeta) MutateTextSize(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *LinkerMeta) DataRoStart() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LinkerMeta) MutateDataRoStart(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *LinkerMeta) Data(obj *LinkedSection) *LinkedSection {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(LinkedSection)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LinkerMeta) Bss(obj *LinkedSection) *LinkedSection {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(LinkedSection)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LinkerMeta) Stacks(obj *VirtualSegment) *VirtualSegment {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(VirtualSegment)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LinkerMeta) PageTables(obj *VirtualSegment) *VirtualSegment {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(VirtualSegment)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LinkerMeta) HeapGuard() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LinkerMeta) MutateHeapGuard(n uint64) bool {
	return rcv._tab.MutateUint64Slot(18, n)
}

func (rcv *LinkerMeta) BootTrampoline(obj *LinkedSection) *LinkedSection {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(LinkedSection)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LinkerMeta) BootTrampolineDest() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LinkerMeta) MutateBootTrampolineDest(n uint64) bool {
	return rcv._tab.MutateUint64Slot(22, n)
}

func LinkerMetaStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func LinkerMetaAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(text), 0)
}
func LinkerMetaAddTextSize(builder *flatbuffers.Builder, textSize uint64) {
	builder.PrependUint64Slot(1, textSize, 0)
}
func LinkerMetaAddDataRoStart(builder *flatbuffers.Builder, dataRoStart uint64) {
	builder.PrependUint64Slot(2, dataRoStart, 0)
}
func LinkerMetaAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(data), 0)
}
func LinkerMetaAddBss(builder *flatbuffers.Builder, bss flatbuffers.UOffsetT) {
	builder.PrependStructSlot(4, flatbuffers.UOffsetT(bss), 0)
}
func LinkerMetaAddStacks(builder *flatbuffers.Builder, stacks flatbuffers.UOffsetT) {
	builder.PrependStructSlot(5, flatbuffers.UOffsetT(stacks), 0)
}
func LinkerMetaAddPageTables(builder *flatbuffers.Builder, pageTables flatbuffers.UOffsetT) {
	builder.PrependStructSlot(6, flatbuffers.UOffsetT(pageTables), 0)
}
func LinkerMetaAddHeapGuard(builder *flatbuffers.Builder, heapGuard uint64) {
	builder.PrependUint64Slot(7, heapGuard, 0)
}
func LinkerMetaAddBootTrampoline(builder *flatbuffers.Builder, bootTrampoline flatbuffers.UOffsetT) {
	builder.PrependStructSlot(8, flatbuffers.UOffsetT(bootTrampoline), 0)
}
func LinkerMetaAddBootTrampolineDest(builder *flatbuffers.Builder, bootTrampolineDest uint64) {
	builder.PrependUint64Slot(9, bootTrampolineDest, 0)
}
func LinkerMetaEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
