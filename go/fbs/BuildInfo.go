// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BuildInfoT struct {
	Banner string
	Style string
	Tag string
}

func (t *BuildInfoT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	bannerOffset := builder.CreateString(t.Banner)
	styleOffset := builder.CreateString(t.Style)
	tagOffset := builder.CreateString(t.Tag)
	BuildInfoStart(builder)
	BuildInfoAddBanner(builder, bannerOffset)
	BuildInfoAddStyle(builder, styleOffset)
	BuildInfoAddTag(builder, tagOffset)
	return BuildInfoEnd(builder)
}

func (rcv *BuildInfo) UnPackTo(t *BuildInfoT) {
	t.Banner = string(rcv.Banner())
	t.Style = string(rcv.Style())
	t.Tag = string(rcv.Tag())
}

func (rcv *BuildInfo) UnPack() *BuildInfoT {
	if rcv == nil { return nil }
	t := &BuildInfoT{}
	rcv.UnPackTo(t)
	return t
}

type BuildInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsBuildInfo(buf []byte, offset flatbuffers.UOffsetT) *BuildInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BuildInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *BuildInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BuildInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BuildInfo) Banner() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *BuildInfo) Style() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *BuildInfo) Tag() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func BuildInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func BuildInfoAddBanner(builder *flatbuffers.Builder, banner flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(banner), 0)
}
func BuildInfoAddStyle(builder *flatbuffers.Builder, style flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(style), 0)
}
func BuildInfoAddTag(builder *flatbuffers.Builder, tag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(tag), 0)
}
func BuildInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
