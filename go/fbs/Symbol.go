// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SymbolT struct {
	Name string
	Start uint64
	End uint64
	FileStart uint64
	FileEnd uint64
	CDefinition string
}

func (t *SymbolT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	cDefinitionOffset := builder.CreateString(t.CDefinition)
	SymbolStart(builder)
	SymbolAddName(builder, nameOffset)
	SymbolAddStart(builder, t.Start)
	SymbolAddEnd(builder, t.End)
	SymbolAddFileStart(builder, t.FileStart)
	SymbolAddFileEnd(builder, t.FileEnd)
	SymbolAddCDefinition(builder, cDefinitionOffset)
	return SymbolEnd(builder)
}

func (rcv *Symbol) UnPackTo(t *SymbolT) {
	t.Name = string(rcv.Name())
	t.Start = rcv.Start()
	t.End = rcv.End()
	t.FileStart = rcv.FileStart()
	t.FileEnd = rcv.FileEnd()
	t.CDefinition = string(rcv.CDefinition())
}

func (rcv *Symbol) UnPack() *SymbolT {
	if rcv == nil { return nil }
	t := &SymbolT{}
	rcv.UnPackTo(t)
	return t
}

type Symbol struct {
	_tab flatbuffers.Table
}

func GetRootAsSymbol(buf []byte, offset flatbuffers.UOffsetT) *Symbol {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Symbol{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Symbol) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Symbol) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Symbol) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Symbol) Start() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Symbol) MutateStart(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *Symbol) End() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Symbol) MutateEnd(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

func (rcv *Symbol) FileStart() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Symbol) MutateFileStart(n uint64) bool {
	return rcv._tab.MutateUint64Slot(12, n)
}

func (rcv *Symbol) FileEnd() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Symbol) MutateFileEnd(n uint64) bool {
	return rcv._tab.MutateUint64Slot(14, n)
}

func (rcv *Symbol) CDefinition() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func SymbolStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func SymbolAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func SymbolAddStart(builder *flatbuffers.Builder, start uint64) {
	builder.PrependUint64Slot(2, start, 0)
}
func SymbolAddEnd(builder *flatbuffers.Builder, end uint64) {
	builder.PrependUint64Slot(3, end, 0)
}
func SymbolAddFileStart(builder *flatbuffers.Builder, fileStart uint64) {
	builder.PrependUint64Slot(4, fileStart, 0)
}
func SymbolAddFileEnd(builder *flatbuffers.Builder, fileEnd uint64) {
	builder.PrependUint64Slot(5, fileEnd, 0)
}
func SymbolAddCDefinition(builder *flatbuffers.Builder, cDefinition flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(cDefinition), 0)
}
func SymbolEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
