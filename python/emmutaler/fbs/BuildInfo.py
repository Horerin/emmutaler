# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BuildInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBuildInfo(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BuildInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def BuildInfoBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x52\x4F\x4D", size_prefixed=size_prefixed)

    # BuildInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BuildInfo
    def Banner(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BuildInfo
    def Style(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BuildInfo
    def Tag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def BuildInfoStart(builder): builder.StartObject(3)
def BuildInfoAddBanner(builder, banner): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(banner), 0)
def BuildInfoAddStyle(builder, style): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(style), 0)
def BuildInfoAddTag(builder, tag): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(tag), 0)
def BuildInfoEnd(builder): return builder.EndObject()


class BuildInfoT(object):

    # BuildInfoT
    def __init__(self):
        self.banner = None  # type: str
        self.style = None  # type: str
        self.tag = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        buildInfo = BuildInfo()
        buildInfo.Init(buf, pos)
        return cls.InitFromObj(buildInfo)

    @classmethod
    def InitFromObj(cls, buildInfo):
        x = BuildInfoT()
        x._UnPack(buildInfo)
        return x

    # BuildInfoT
    def _UnPack(self, buildInfo):
        if buildInfo is None:
            return
        self.banner = buildInfo.Banner()
        self.style = buildInfo.Style()
        self.tag = buildInfo.Tag()

    # BuildInfoT
    def Pack(self, builder):
        if self.banner is not None:
            banner = builder.CreateString(self.banner)
        if self.style is not None:
            style = builder.CreateString(self.style)
        if self.tag is not None:
            tag = builder.CreateString(self.tag)
        BuildInfoStart(builder)
        if self.banner is not None:
            BuildInfoAddBanner(builder, banner)
        if self.style is not None:
            BuildInfoAddStyle(builder, style)
        if self.tag is not None:
            BuildInfoAddTag(builder, tag)
        buildInfo = BuildInfoEnd(builder)
        return buildInfo
