# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffers

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LinkerMeta(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLinkerMeta(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LinkerMeta()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def LinkerMetaBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x52\x4F\x4D", size_prefixed=size_prefixed)

    # LinkerMeta
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LinkerMeta
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from emmutaler.flatbuffers.LinkedSection import LinkedSection
            obj = LinkedSection()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LinkerMeta
    def TextSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # LinkerMeta
    def DataRoStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # LinkerMeta
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from emmutaler.flatbuffers.LinkedSection import LinkedSection
            obj = LinkedSection()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LinkerMeta
    def Bss(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from emmutaler.flatbuffers.LinkedSection import LinkedSection
            obj = LinkedSection()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LinkerMeta
    def Stacks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            from emmutaler.flatbuffers.VirtualSegment import VirtualSegment
            obj = VirtualSegment()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LinkerMeta
    def PageTables(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = o + self._tab.Pos
            from emmutaler.flatbuffers.VirtualSegment import VirtualSegment
            obj = VirtualSegment()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LinkerMeta
    def HeapGuard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # LinkerMeta
    def BootTrampoline(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = o + self._tab.Pos
            from emmutaler.flatbuffers.LinkedSection import LinkedSection
            obj = LinkedSection()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LinkerMeta
    def BootTrampolineDest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def LinkerMetaStart(builder): builder.StartObject(10)
def LinkerMetaAddText(builder, text): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)
def LinkerMetaAddTextSize(builder, textSize): builder.PrependUint64Slot(1, textSize, 0)
def LinkerMetaAddDataRoStart(builder, dataRoStart): builder.PrependUint64Slot(2, dataRoStart, 0)
def LinkerMetaAddData(builder, data): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def LinkerMetaAddBss(builder, bss): builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(bss), 0)
def LinkerMetaAddStacks(builder, stacks): builder.PrependStructSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(stacks), 0)
def LinkerMetaAddPageTables(builder, pageTables): builder.PrependStructSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(pageTables), 0)
def LinkerMetaAddHeapGuard(builder, heapGuard): builder.PrependUint64Slot(7, heapGuard, 0)
def LinkerMetaAddBootTrampoline(builder, bootTrampoline): builder.PrependStructSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(bootTrampoline), 0)
def LinkerMetaAddBootTrampolineDest(builder, bootTrampolineDest): builder.PrependUint64Slot(9, bootTrampolineDest, 0)
def LinkerMetaEnd(builder): return builder.EndObject()
