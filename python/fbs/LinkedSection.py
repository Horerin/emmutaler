# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LinkedSection(object):
    __slots__ = ['_tab']

    # LinkedSection
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LinkedSection
    def Start(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # LinkedSection
    def End(self): return self._tab.Get(flatbuffers.number_types.Uint64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))

def CreateLinkedSection(builder, start, end):
    builder.Prep(8, 16)
    builder.PrependUint64(end)
    builder.PrependUint64(start)
    return builder.Offset()


class LinkedSectionT(object):

    # LinkedSectionT
    def __init__(self):
        self.start = 0  # type: int
        self.end = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        linkedSection = LinkedSection()
        linkedSection.Init(buf, pos)
        return cls.InitFromObj(linkedSection)

    @classmethod
    def InitFromObj(cls, linkedSection):
        x = LinkedSectionT()
        x._UnPack(linkedSection)
        return x

    # LinkedSectionT
    def _UnPack(self, linkedSection):
        if linkedSection is None:
            return
        self.start = linkedSection.Start()
        self.end = linkedSection.End()

    # LinkedSectionT
    def Pack(self, builder):
        return CreateLinkedSection(builder, self.start, self.end)
